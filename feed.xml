<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://rodrigo-morais.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://rodrigo-morais.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rodrigo-morais.github.io/" rel="alternate" type="text/html" /><updated>2016-12-01T20:35:04+01:00</updated><id>https://rodrigo-morais.github.io//</id><title type="html">In development</title><subtitle>Software Developer</subtitle><author><name>Rodrigo Morais</name></author><entry xml:lang="en"><title type="html">Why and What is Functional Programming?</title><link href="https://rodrigo-morais.github.io/why-and-what-is-functional-programming/" rel="alternate" type="text/html" title="Why and What is Functional Programming?" /><published>2016-12-01T00:00:00+01:00</published><updated>2016-12-01T00:00:00+01:00</updated><id>https://rodrigo-morais.github.io/why-and-what-is-functional-programming.en</id><content type="html" xml:base="https://rodrigo-morais.github.io/why-and-what-is-functional-programming/">&lt;p&gt;Hey folks!&lt;/p&gt;

&lt;p&gt;Today we will talk about functional paradigm or functional programming (&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;).
Functional paradigm is a different approach to work with software development which the majority of software engineers are accustomed. Probably you as the majority of developers are working or have worked with Imperative paradigm and / or Object Oriented (&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;&lt;/em&gt;) paradigm. So Functional paradigm has some different ideas to solve the same problems which Imperative and Object Oriented solve too, and as everything has pros and cons to be evaluated.&lt;/p&gt;

&lt;p&gt;In these last years I was using a little of functional approaches in my code as osmosis because it was making my code better and simpler than &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;&lt;/em&gt;. In majority of the time I knew the implementation, but I didn’t know about the meaning of what I was using and the theoretical benefits. I mean that I could see the benefits in my code, but I did know what it really was. In other words it was just a perception.
In this year I started to work in a project where we were using a lot of functional techniques together with &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;&lt;/em&gt;, and working with very smart folks which know a lot about &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;. It showed me how important to deepen my knowledge in &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I am studying &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; not to work with it in system which use 100% &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; approach, but to open my mind to new solution to old problems that I was solving in majority of time using &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;&lt;/em&gt; approaches. As when we study another language or framework to see new ideas and solutions to problems which we are solving in our day by day, study a new paradigm has the same objective.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what are the Functional Paradigm main ideas?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is possible, to me, says that immutability, avoid side effects, recursion, and pure functions are the principal ideas of &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;. They are the base to start to use and mainly understand &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;. In my opinion understand this base is the most difficult. When we have just a superficial vision about that it is easy, but when we start to dive in the paradigm it show the complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why learn FP can be hard?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can see two reasons for that. First of all, switch from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;&lt;/em&gt; to &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; is not simple because the concepts that we have in our mind and we used in our professional life for long time are totally different. Second, and in my opinion the most important, the &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; came from math and we, developers, when start to learn it hardly ever start with math. As Imperative programming came from Touring machine, the FP came from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda Calculus&lt;/code&gt;&lt;/em&gt; and in my opinion it is the first thing that we have to study to make this process smoother.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, what are the benefits?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If learn &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; is hard and we have to invest a lot of time and effort to do it, then we have to be rewarded. In my short experience of &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; the rewards which I can see are:
Simplest code, much more easier to apply Single Responsibility Principle (&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SRP&lt;/code&gt;&lt;/em&gt;);
Short functions. Probably majority of our functions doesn’t have more than 5 lines;
Understandability. With a simple code and short functions the code become really understandable. Don’t forget the majority of our time we are just reading code;
Immutability and pure functions. Is not necessary to be worry if the variable value change or not, because we just don’t have variables. Pass a value to a function and have sure that the result is always the same become the code much more predictable;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We can add much more benefits from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt; as parallelism, but for me the best one is to open mind to a new approach and improve ourself as solvers.&lt;/p&gt;

&lt;p&gt;The best way to learn &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FP&lt;/code&gt;&lt;/em&gt;, in my opinion, is learn &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda Calculus&lt;/code&gt;&lt;/em&gt;, understand the basic concepts, and after choose a language to dig in it.&lt;/p&gt;

&lt;p&gt;If you are in this journey or thinking to start it let your commentary and have a great experience!&lt;/p&gt;</content><author><name>Rodrigo Morais</name></author><summary type="html">Hey folks!</summary></entry><entry xml:lang="en"><title type="html">Using local storage with React and Redux</title><link href="https://rodrigo-morais.github.io/react-redux-local-storage/" rel="alternate" type="text/html" title="Using local storage with React and Redux" /><published>2016-11-29T00:00:00+01:00</published><updated>2016-11-29T00:00:00+01:00</updated><id>https://rodrigo-morais.github.io/react-redux-local-storage.en</id><content type="html" xml:base="https://rodrigo-morais.github.io/react-redux-local-storage/">&lt;p&gt;Usually our application starts &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux's&lt;/code&gt;&lt;/em&gt; store with an empty object to show that the application doesn’t have any data when it starts. In the future when users have some interaction or when the application gets some data from the back-end so the store will keep these data. It is the most commom way to use &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;&lt;/em&gt; in a &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/em&gt; project, at least in the projects which I worked til now, but sometimes we need another approach.
To create a store with &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;&lt;/em&gt; we have to use a function called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;&lt;/em&gt; which receives our &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt;&lt;/em&gt; as parameters and should be imported from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ok, first we can use as an example a &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;&lt;/em&gt; for a TODO application. Probably we have a file called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducers.js&lt;/code&gt;&lt;/em&gt; to create it.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// add new todo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;REMOV_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// remove todos&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With this &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducer&lt;/code&gt;&lt;/em&gt; we can create a store. To do it we have to import the &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;&lt;/em&gt; function from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;&lt;/em&gt; and our &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reducers&lt;/code&gt;&lt;/em&gt; in the file which we are creating the store, which probably is called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;&lt;/em&gt; or something similar.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducers&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./reducers'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have our store with a TODO list which was initialized with empty array ([]).&lt;/p&gt;

&lt;p&gt;Ok, it works pretty well. But in this case every time that our application is reloaded we lose all TODOs which we registered. If we have to keep they we have to save these TODOs in some database or something similar.
Let’s think a little bit more and say that we have a more complex application which get some data from the back-end and they are not changed soon and we want to keep them when we reload the page. How can we do it?
One solution to this situation is use the &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;local storage&lt;/code&gt;&lt;/em&gt; which is a small “database” inside our browser.&lt;/p&gt;

&lt;p&gt;Let’s take a look how todo that in our TODO app.&lt;/p&gt;

&lt;p&gt;First we have to create two functions to get data from the local storage and to save data there.
For it we can create a file called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage.js&lt;/code&gt;&lt;/em&gt; where we will have these functions.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serializedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'state'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serializedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serializedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saveState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serializedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'state'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serializedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ignore&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To use the local storage is pretty simple, it works as a list of key-values. When we want get data we call the function &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getItem&lt;/code&gt;&lt;/em&gt; from the global object called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;&lt;/em&gt; passing the key as a parameter. And to save data we call the function &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setItem&lt;/code&gt;&lt;/em&gt; from the same global object passing the key and the data.
The data in local storage have to be always serialized and because of that when we load the data we have to deserialize using &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt;&lt;/em&gt; and when we send data we have to serialize they with &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt;&lt;/em&gt;.
Another point is that sometimes the local storage hasn’t permission to be accessed or for other reason we can get an error. Because of that, we have to use a try/catch when call functions from local storage.&lt;/p&gt;

&lt;p&gt;Now we have to use our functions to save and load data from the local storage to our application.
In our &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;&lt;/em&gt; file we will import our &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage.js&lt;/code&gt;&lt;/em&gt; file and use its functions.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saveState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./localStorage'&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;saveState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now in the function &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;&lt;/em&gt; we are passing a second parameter which is the return of the function &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadSotre&lt;/code&gt;&lt;/em&gt; that we created to get the data from local storage. The function &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;createStore&lt;/code&gt;&lt;/em&gt; from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;&lt;/em&gt; accepts to receive data to hydrate the store. Take a look in the &lt;a href=&quot;https://github.com/reactjs/redux/blob/master/docs/api/createStore.md&quot;&gt;documentation&lt;/a&gt;.
To save the data in the local storage we are using a function called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;&lt;/em&gt; from the store, which will be called every time when store is modified. For this function we are passing a function which call the &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveState&lt;/code&gt;&lt;/em&gt; function which we created before and it will receive a new state of todos to be save in local storage.&lt;/p&gt;

&lt;p&gt;With this new implementation we can save data in the local storage and reuse data without hit on the back-end every time that we reload our app and still use til we close the browser or browser’s tab.&lt;/p&gt;

&lt;p&gt;If you want test this approach, please, take a look in this &lt;a href=&quot;https://github.com/rodrigo-morais/react-redux-to-do&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;</content><author><name>Rodrigo Morais</name></author><summary type="html">Usually our application starts Redux's store with an empty object to show that the application doesn’t have any data when it starts. In the future when users have some interaction or when the application gets some data from the back-end so the store will keep these data. It is the most commom way to use Redux in a React project, at least in the projects which I worked til now, but sometimes we need another approach.
To create a store with Redux we have to use a function called createStore which receives our reducers as parameters and should be imported from Redux.</summary></entry><entry xml:lang="en"><title type="html">Welcome</title><link href="https://rodrigo-morais.github.io/welcome/" rel="alternate" type="text/html" title="Welcome" /><published>2016-11-28T00:00:00+01:00</published><updated>2016-11-28T00:00:00+01:00</updated><id>https://rodrigo-morais.github.io/welcome.en</id><content type="html" xml:base="https://rodrigo-morais.github.io/welcome/">&lt;p&gt;Hello guys!!!!&lt;/p&gt;

&lt;p&gt;Today I’m giving the kick off of my blog.&lt;/p&gt;

&lt;p&gt;I’d like to use this channel to share with you what I’m doing and studiyng. In the last years I have been working with back-end and front-end and I still doing that.&lt;/p&gt;

&lt;p&gt;Currently I’m working in &lt;a href=&quot;http://babbel.com&quot;&gt;Babbel&lt;/a&gt; with Ruby on Rails on the back-end and with JavaScript and mainly React on the front-end. Because of that, I’ll write a lot about those tecnologies / languages / frameworks to share with you how I’m solving the problems which I have found and to get your opinion about the solutions.&lt;/p&gt;

&lt;p&gt;Beyond that, I’m very interested in Functional Programming and in languages as Haskell and Elm. Then we will have a bunch of posts about these subjects too.&lt;/p&gt;

&lt;p&gt;My objective here is not just share or teach something that I know or I’m doing, but I’d like to receive feedbacks about what I’m writing to be possible grow up with you learning as much as possible together. Therefore I invite you all to build the posts together participating with comentaries.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;</content><author><name>Rodrigo Morais</name></author><summary type="html">Hello guys!!!!</summary></entry></feed>
